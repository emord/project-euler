#!/usr/bin/python3

"""
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are 
all figurate (polygonal) numbers and are generated by the following formulae:
Triangle           P3,n=n(n+1)/2           1, 3, 6, 10, 15, ...
Square           P4,n=n2           1, 4, 9, 16, 25, ...
Pentagonal           P5,n=n(3n−1)/2           1, 5, 12, 22, 35, ...
Hexagonal           P6,n=n(2n−1)           1, 6, 15, 28, 45, ...
Heptagonal           P7,n=n(5n−3)/2           1, 7, 18, 34, 55, ...
Octagonal           P8,n=n(3n−2)           1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three 
interesting properties.

    The set is cyclic, in that the last two digits of each number is the first 
    two digits of the next number (including the last number with the first).
    Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and 
    pentagonal (P5,44=2882), is represented by a different number in the set.
    This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which 
each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and 
octagonal, is represented by a different number in the set.
"""

import cProfile

def suitableTris():
    return [i*(i+1)//2 for i in range(10000) if 10**3 < i*(i+1)//2 < 10**4]

def suitableSquares():
    return [i*i for i in range(10000) if 10**3 < i*i < 10**4]

def suitablePentas():
    return [i*(3*i-1)//2 for i in range(10000) if 10**3 < i*(3*i-1)//2 < 10**4]

def suitableHexes():
    return [i*(2*i-1) for i in range(10000) if 10**3 < i*(2*i-1) < 10**4]

def suitableHeptas():
    return [i*(5*i-3)//2 for i in range(10000) if 10**3 < i*(5*i-3)//2 < 10**4]

def suitableOctas():
    return [i*(3*i-2) for i in range(10000) if 10**3 < i*(3*i-2) < 10**4]

def main():
    trinums, squarenums, pentanums = suitableTris(), suitableSquares(), suitablePentas()
    hexanums, heptanums, octanums = suitableHexes(), suitableHeptas(), suitableOctas()
    
    nums = trinums + squarenums + pentanums + hexanums + heptanums + octanums
    
    trinums, squarenums, pentanums = set(trinums), set(squarenums), set(pentanums)
    hexanums, heptanums, octanums = set(hexanums), set(heptanums), set(octanums)
    
    for a in nums:
        aa = str(a)
        for b in nums:
            bb = str(b)
            if aa[2:] != bb[:2]: continue
            for c in nums:
                cc = str(c)
                if bb[2:] != cc[:2]: continue
                for d in nums:
                    dd = str(d)
                    if cc[2:] != dd[:2]: continue
                    for e in nums:
                        ee = str(e)
                        if dd[2:] != ee[:2]: continue
                        for f in nums:
                            ff = str(f)
                            if ee[2:] != ff[:2]: continue
                            if ff[2:] == aa[:2]: 
                                blah = {a,b,c,d,e,f}
                                if len(blah&trinums) != 2: break
                                if len(blah&squarenums) != 1: break
                                if len(blah&pentanums) != 1: break
                                if len(blah&hexanums) != 1: break
                                if len(blah&heptanums) != 1: break
                                if len(blah&octanums) != 1: break
                                print(a,b,c,d,e,f,a+b+c+d+e+f)
                                return
                            

if __name__ == '__main__':
    cProfile.run('main()')