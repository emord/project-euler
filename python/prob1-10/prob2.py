#!/usr/bin/python3

"""
Each new term in the Fibonacci sequence is generated by adding the previous two 
terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed 
four million, find the sum of the even-valued terms.
"""

import cProfile
import libeuler

def main():
    # naive way
    #result = 0
    #fib = libeuler.fibonacci(maxnum=4*10**6)
    #for x in fib:
    #    if x % 2 == 0:
    #        result += x
    #print(result)
    
    #better way
    # calculate every third term (known to be odd)
    #a = n-2 b = n-1
    a = 2
    b = 8
    result = 10
    while b < 4*10**6:
        result += 4*b + a #even numbers follow this recurrence relation
        c = 4*b + a 
        a = b
        b = c
    result -= b # the last number will be more than 4 million
    print(result)

if __name__ == '__main__':
    cProfile.run('main()')