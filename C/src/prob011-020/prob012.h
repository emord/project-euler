/*
 * prob012.h
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
 * ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * Let us list the factors of the first seven triangle numbers:
 *
 *   1: 1
 *   3: 1,3
 *   6: 1,2,3,6
 *  10: 1,2,5,10
 *  15: 1,3,5,15
 *  21: 1,3,7,21
 *  28: 1,2,4,7,14,28
 *  We can see that 28 is the first triangle number to have over five divisors.
 *
 *  What is the value of the first triangle number to have over five hundred
 *  divisors?
 *
 *  Created on: Feb 1, 2012
 *      Author: Jonathan Emord
 */

#ifndef PROB12_H_
#define PROB12_H_

#include <stdio.h>
#include <math.h>

unsigned long triangleNum(unsigned long n) {
	return n*(n+1)/2;
}

int getNumDivisors(unsigned long n) {
	int result = 2;
	unsigned long i;

	for (i = 2; i < (unsigned long) sqrt((double)n); ++i) {
		if (n % i == 0) result += 2;
	}

	return result;
}

void problem012() {
	int numDivisors = 0;
	unsigned long i = 1;

	while (numDivisors < 500) {
		numDivisors = getNumDivisors(triangleNum(i));
		++i;
	}

	printf("Answer: %lu\n", triangleNum(i-1));
}


#endif /* PROB12_H_ */
